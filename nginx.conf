user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Upstream para load balancing do n8n
    upstream n8n_backend {
        # Round-robin por padrão
        # Outras opções: least_conn, ip_hash
        server n8n:5678 max_fails=3 fail_timeout=30s;
        
        # Docker Compose vai criar múltiplas instâncias com nomes:
        # n8n_1, n8n_2, n8n_3, etc.
        # Mas como usamos scaling, o Docker resolve automaticamente
        # para todas as instâncias do serviço "n8n"
    }

    # Rate limiting - mais permissivo para assets estáticos
    limit_req_zone $binary_remote_addr zone=n8n_limit:10m rate=50r/s;
    limit_req_zone $binary_remote_addr zone=assets_limit:10m rate=100r/s;

    server {
        listen 80;
        server_name localhost;

        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Assets estáticos (JS, CSS, fontes, imagens) - rate limiting mais permissivo
        location ~* \.(js|css|woff|woff2|ttf|eot|ico|png|jpg|jpeg|gif|svg)$ {
            limit_req zone=assets_limit burst=200 nodelay;
            
            proxy_pass http://n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache headers para assets estáticos
            expires 1h;
            add_header Cache-Control "public, immutable";
            
            # Timeouts menores para assets
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Diretório /assets com configurações específicas
        location /assets/ {
            limit_req zone=assets_limit burst=200 nodelay;
            
            proxy_pass http://n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache para assets
            expires 1h;
            add_header Cache-Control "public, immutable";
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Proxy para n8n - todas as outras requisições
        location / {
            # Rate limiting mais relaxado
            limit_req zone=n8n_limit burst=100 nodelay;

            proxy_pass http://n8n_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;

            # Client settings
            client_max_body_size 50M;
        }

        # Status page do nginx (opcional)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }
    }
}
